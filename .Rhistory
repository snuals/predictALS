ALSFRS_mean +  Onset2enrollment +
Onset_limb + Onset_bulbar + Onset_both")
model_cox = coxph(formula, data = df)
save(model_cox, file = "cox_model.rda")
loadedNamespaces("cox_model.rda")    # Load saved model
load("cox_model.rda")    # Load saved model
ls()
model_cox
q()
shiny::runApp()
ls()
model_cox
# read data
surv = read.csv("/Users/hong/Dropbox/ALSmaster/PROACT/Survival_all.csv") # n=9080
surv$time_event = (surv$time_event)/30 # convert days to months
proact = read.csv("/Users/hong/Dropbox/ALSmaster/PROACT/PROACT_imputed_dummied.csv") # n=6507
proact = proact %>% # select features to build a prototype model
select(SubjectID, Age, GenderM,
fvc.slope, fvc_mean,
ALSFRS_Total_slope, ALSFRS_Total_mean,
onset_delta,
onset_siteLimb, onset_siteBulbar, onset_siteLimb.and.Bulbar)
df = merge(surv, proact, by = "SubjectID")
df = df[,-1] # n=6041
# sort out feature names
names(df) = c("Time", "Status", "Age_enrollment", "Gender",
"FVC_slope", "FVC_mean",
"ALSFRS_slope", "ALSFRS_mean",
"Onset2enrollment",
"Onset_limb", "Onset_bulbar", "Onset_both"
)
df$Onset2enrollment = -(df$Onset2enrollment)/30
# fit a cox model to data
formula = as.formula("Surv(Time, Status) ~ Age_enrollment + Gender +
FVC_slope + FVC_mean + ALSFRS_slope +
ALSFRS_mean +  Onset2enrollment +
Onset_limb + Onset_bulbar + Onset_both")
model_cox = coxph(formula, data = df)
saveRDS(model_cox, file = "cox_model.rda")
model_cox = readRDS("cox_model.rda")    # Load saved model
q()
shiny::runApp()
runApp()
runApp()
ls()
runApp()
surv = read.csv("/Users/hong/Dropbox/ALSmaster/PROACT/Survival_all.csv") # n=9080
surv$time_event = (surv$time_event)/30 # convert days to months
proact = read.csv("/Users/hong/Dropbox/ALSmaster/PROACT/PROACT_imputed_dummied.csv") # n=6507
proact = proact %>% # select features to build a prototype model
select(SubjectID, Age, GenderM,
fvc.slope, fvc_mean,
ALSFRS_Total_slope, ALSFRS_Total_mean,
onset_delta,
onset_siteLimb, onset_siteBulbar, onset_siteLimb.and.Bulbar)
df = merge(surv, proact, by = "SubjectID")
df = df[,-1] # n=6041
# sort out feature names
names(df) = c("Time", "Status", "Age_enrollment", "Gender",
"FVC_slope", "FVC_mean",
"ALSFRS_slope", "ALSFRS_mean",
"Onset2enrollment",
"Onset_limb", "Onset_bulbar", "Onset_both"
)
df$Onset2enrollment = -(df$Onset2enrollment)/30
# Time; from enrollment to death or censoring
# Status; 0=censoring, 1=event (death)
# Gender; 0=female, 1=male
# Onset2Enrollment; time from onset to enrollment (months)
# fit a cox model to data
formula = as.formula("Surv(Time, Status) ~ Age_enrollment + Gender +
FVC_slope + FVC_mean + ALSFRS_slope +
ALSFRS_mean +  Onset2enrollment +
Onset_limb + Onset_bulbar + Onset_both")
model_cox = coxph(formula, data = df)
save(model_cox, file = "cox_model.rda")
runApp()
q()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
?load
runApp()
environment()
load("cox_model.rda", envir = R_GlobalEnv)
load("cox_model.rda", envir = "R_GlobalEnv")
load("cox_model.rda", envir = .GlobalEnv)
runApp()
ls()
model_cox
q()
shiny::runApp()
ls()
model_cox
model_cox
model_cox()
runApp()
runApp()
runApp()
surv = read.csv("/Users/hong/Dropbox/ALSmaster/PROACT/Survival_all.csv") # n=9080
surv$time_event = (surv$time_event)/30 # convert days to months
proact = read.csv("/Users/hong/Dropbox/ALSmaster/PROACT/PROACT_imputed_dummied.csv") # n=6507
proact = proact %>% # select features to build a prototype model
select(SubjectID, Age, GenderM,
fvc.slope, fvc_mean,
ALSFRS_Total_slope, ALSFRS_Total_mean,
onset_delta,
onset_siteLimb, onset_siteBulbar, onset_siteLimb.and.Bulbar)
df = merge(surv, proact, by = "SubjectID")
df = df[,-1] # n=6041
# sort out feature names
names(df) = c("Time", "Status", "Age_enrollment", "Gender",
"FVC_slope", "FVC_mean",
"ALSFRS_slope", "ALSFRS_mean",
"Onset2enrollment",
"Onset_limb", "Onset_bulbar", "Onset_both"
)
df$Onset2enrollment = -(df$Onset2enrollment)/30
# Time; from enrollment to death or censoring
# Status; 0=censoring, 1=event (death)
# Gender; 0=female, 1=male
# Onset2Enrollment; time from onset to enrollment (months)
# fit a cox model to data
formula = as.formula("Surv(Time, Status) ~ Age_enrollment + Gender +
FVC_slope + FVC_mean + ALSFRS_slope +
ALSFRS_mean +  Onset2enrollment +
Onset_limb + Onset_bulbar + Onset_both")
model_cox = coxph(formula, data = df)
save(model_cox, file = "cox_model.RData")
runApp()
q()
shiny::runApp()
ls()
model_cox
sample_data = read_csv('sample_data.csv')
source("featureMapping.R")
new_df = feature_mapping(sample_data)
cox_fit = survfit(model_cox, newdata = new_df)
cox_fit = surv_fit(model_cox, newdata = new_df)
new_df
cox_fit = surv_fit(model_cox, data = new_df)
cox_fit = survfit(model_cox, data = new_df)
cox_fit = survfit(model_cox, data = new_df)
model_cox
cox_fit = survfit(model_cox(), data = new_df)
cox_fit = survfit(model_cox, data = new_df)
new_df
class(new_df)
?survfit
cox_fit = survfitcoxph.fit(model_cox, data = new_df)
cox_fit = survfitcoxph.fit(model_cox, newdata = new_df)
cox_fit = survfit(model_cox, data = new_df)
cox_fit = survfit(model_cox, newdata = new_df)
class(model_cox)
?survfit
cox_fit = survfit(model_cox, newdata = new_df[1,])
cox_fit = survfit(model_cox, newdata = new_df[1,])
new_df
new_df[1,]
cox_fit = survfit(model_cox, newdata = as.list(new_df[1,]))
cox_fit = survfit(model_cox, newdata = new_df)
cox_fit = survfit(formula = model_cox, newdata = new_df)
ls()
cox_fit = survfit(formula = model_cox, newdata = new_df)
library(survival)
cox_fit = survfit(formula = model_cox, newdata = new_df)
q()
# load library
library(tidyverse)
library(mlr)
library(Hmisc)
library(randomForestSRC)
library(doMC)
registerDoMC(cores = 4)
# Predict survival
surv = read.csv("/Users/hong/Dropbox/ALSmaster/PROACT/Survival_all.csv") # n=9080
proact = read.csv("/Users/hong/Dropbox/ALSmaster/PROACT/PROACT_imputed_dummied.csv") # n=6507
df = merge(surv, proact, by = "SubjectID")
df = df[,-1] # n=6041
df = df %>% # to build a prototype model
select(time_event, status, Age, GenderM,
fvc.slope, fvc_mean,
ALSFRS_Total_slope, ALSFRS_Total_mean,
onset_delta,
onset_siteBulbar, onset_siteLimb, onset_siteLimb.and.Bulbar)
head(df)
# train
model_cox = train(surv.lrn.coxph, surv.task)
# Predict survival
surv = read.csv("/Users/hong/Dropbox/ALSmaster/PROACT/Survival_all.csv") # n=9080
proact = read.csv("/Users/hong/Dropbox/ALSmaster/PROACT/PROACT_imputed_dummied.csv") # n=6507
df = merge(surv, proact, by = "SubjectID")
df = df[,-1] # n=6041
df = df %>% # to build a prototype model
select(time_event, status, Age, GenderM,
fvc.slope, fvc_mean,
ALSFRS_Total_slope, ALSFRS_Total_mean,
onset_delta,
onset_siteBulbar, onset_siteLimb, onset_siteLimb.and.Bulbar)
# task
surv.task = makeSurvTask(data = df,
target = c("time_event", "status"))
# learner
surv.lrn.coxph = makeLearner("surv.coxph")
# train
model_cox = train(surv.lrn.coxph, surv.task)
save(model_cox, file = "model_cox.rda")
# split dataset
set.seed(999)
n = sample(dim(df)[1], size = 0.75*dim(df)[1]) #
trainset = df[n,]
testset = df[-n,]
# task
surv.task = makeSurvTask(data = trainset,
target = c("time_event", "status"))
# train
model_cox = train(surv.lrn.coxph, surv.task)
# predict & performance
pred.coxph = predict(model_cox, newdata = testset)
pred.coxph.df = as.data.frame(pred.coxph)
performance(pred.coxph)
# resample
rdsc = makeResampleDesc("CV", iters = 10)
cv.coxph = resample("surv.coxph", surv.task,
resampling = rdsc,
keep.pred = F)
# prediction error curve
library(pec)
library(survival)
library(randomForestSRC)
library(rms)
library(prodlim)
library(party)
library(riskRegression)
fitform = Surv(time_event, status) ~ .
fitcox <- coxph(fitform, data=trainset, x = TRUE)
set.seed(13)
pcox = predictSurvProb(fitcox, newdata = testset,
times = 30*12)
extends <- function(...)TRUE
pec_cox = pec(list("Cox" = fitcox), # prediction error curves
data = testset,
traindata = trainset,
formula = Surv(time_event,status)~1, # KM estimator to calculate the weights (probabilities of not being censored)
reference = T, # KM prediction model as a reference
splitMethod = "cv10", B = 4, # 10-fold CV, repeated 4 times
keep.index = T, keep.matrix = T)
save(pec_cox, file = "pec_cox.rda")
plot(pec_cox)
crps.t1000 = crps(fitpec, times = 1000)
crps.t1000 = crps(pec_cox, times = 1000)
?sample
m = sample(dim(df)[1], size = 5)
example_data = df[m,]
sample_data = df[m,]
write.csv(sample_data, "sample_data.csv")
head(testset)
head(sample_data)
?makeSurvTask
predict(model_cox, newdata = sample_data[,-c(1,2)])
?predict
predict(model_cox, newdata = sample_data[,-c(1,2)])
predict(model_cox, newdata = sample_data[,-c(1,2)], type = "expected")
predict(model_cox, newdata = sample_data[,-c(1,2)], type = "risk")
exp(0.83)
pcox = predictSurvProb(fitcox, newdata = sample_data[,-c(1,2)],
times = 30*12)
# par(mfrow = c(2,4))
# lapply(1:8, function(x){
plotPredictSurvProb(fitcox,newdata=sample_data[,-c(1,2)],lty=1)
?coxph
fixcox
fitcox
plotPredictSurvProb(model_cox,newdata=testset[1,],lty=1)
pcox = predictSurvProb(fitcox, newdata = sample_data[,-c(1,2)],
times = 30*12)
pcox
# predict & performance
pred.coxph = predict(model_cox, newdata = testset) # testset
pred.coxph.df = as.data.frame(pred.coxph)
pred.coxph.df
names(pred.coxph.df)
save(fitcox, file = "model_cox.rda")
fitform = Surv(time_event, status) ~ .
fitcox <- coxph(fitform, data=df, x = TRUE)
save(fitcox, file = "model_cox.rda")
plotPredictSurvProb(fitcox,newdata=testset[1,],lty=1)
plotPredictSurvProb(fitcox,newdata=sample_data[,-c(1,2)],lty=1)
# split dataset
set.seed(999)
n = sample(dim(df)[1], size = 0.75*dim(df)[1]) #
trainset = df[n,]
testset = df[-n,]
# task
surv.task = makeSurvTask(data = trainset, # only the trainset
target = c("time_event", "status"))
# learner
surv.lrn.coxph = makeLearner("surv.coxph")
# train
model_cox = train(surv.lrn.coxph, surv.task)
# predict & performance
pred.coxph = predict(model_cox, newdata = testset) # testset
pred.coxph.df = as.data.frame(pred.coxph)
performance(pred.coxph)
# resample
rdsc = makeResampleDesc("CV", iters = 10)
cv.coxph = resample("surv.coxph", surv.task,
resampling = rdsc,
keep.pred = F)
fitform = Surv(time_event, status) ~ .
fitcox <- coxph(fitform, data=trainset, x = TRUE)
set.seed(13)
pcox = predictSurvProb(fitcox, newdata = testset,
times = 30*12)
extends <- function(...)TRUE
pec_cox = pec(list("Cox" = fitcox), # prediction error curves
data = testset,
traindata = trainset,
formula = Surv(time_event,status)~1, # KM estimator to calculate the weights (probabilities of not being censored)
reference = T, # KM prediction model as a reference
splitMethod = "cv10", B = 4, # 10-fold CV, repeated 4 times
keep.index = T, keep.matrix = T)
save(pec_cox, file = "pec_cox.rda")
plot(pec_cox)
shiny::runApp()
runApp()
runApp()
runApp()
?coxph
library(tidyverse)
?plotPredictSurvProb
q()
shiny::runApp()
?dashboardPage
??dashboardPage
runApp()
runApp()
ls()
load("model_cox.rda") # fitcox, a cox model fitted to the whole PROACT dataset
load("pec_cox.rda") # prediction error curves in a test dataset
ls()
fitcox
class(fitcox)
runApp()
# Predict survival
surv = read.csv("/Users/hong/Dropbox/ALSmaster/PROACT/Survival_all.csv") # n=9080
proact = read.csv("/Users/hong/Dropbox/ALSmaster/PROACT/PROACT_imputed_dummied.csv") # n=6507
df = merge(surv, proact, by = "SubjectID")
df = df[,-1] # n=6041
df = df %>% # to build a prototype model
select(time_event, status, Age, GenderM,
fvc.slope, fvc_mean,
ALSFRS_Total_slope, ALSFRS_Total_mean,
onset_delta,
onset_siteBulbar, onset_siteLimb, onset_siteLimb.and.Bulbar)
#fitform = Surv(time_event, status) ~ .
fitcox <- coxph(Surv(time_event, status) ~ ., data=df, x = TRUE)
save(fitcox, file = "model_cox.rda")
q()
shiny::runApp()
runApp()
#fitform = Surv(time_event, status) ~ .
fitcox <- coxph(Surv(time_event, status) ~ ., data=df, x = TRUE)
# Predict survival
surv = read.csv("/Users/hong/Dropbox/ALSmaster/PROACT/Survival_all.csv") # n=9080
proact = read.csv("/Users/hong/Dropbox/ALSmaster/PROACT/PROACT_imputed_dummied.csv") # n=6507
df = merge(surv, proact, by = "SubjectID")
df = df[,-1] # n=6041
df = df %>% # to build a prototype model
select(time_event, status, Age, GenderM,
fvc.slope, fvc_mean,
ALSFRS_Total_slope, ALSFRS_Total_mean,
onset_delta,
onset_siteBulbar, onset_siteLimb, onset_siteLimb.and.Bulbar)
#fitform = Surv(time_event, status) ~ .
fitcox <- coxph(Surv(time_event, status) ~ ., data=df, x = TRUE)
save(fitcox, file = "fitcox.rda")
runApp()
q()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
q()
shiny::runApp()
runApp()
q()
shiny::runApp()
options('repos')
install.packages("shiny")
install.packages("shiny")
install.packages("shinydashboard")
install.packages("readr")
install.packages("DT")
install.packages("tidyverse")
install.packages("survival")
install.packages("pec")
shiny::runApp()
options('repos')
options('repos')
if (!requireNamespace("shiny")){
install.packages("shiny")
}
if (!requireNamespace("readr")){
install.packages("readr")
}
if (!requireNamespace("DT")){
install.packages("DT")
}
if (!requireNamespace("tidyverse")){
install.packages("tidyverse")
}
if (!requireNamespace("survival")){
install.packages("survival")
}
if (!requireNamespace("pec")){
install.packages("pec")
}
library(shiny)
library(readr)
library(DT)
library(tidyverse)
library(survival)
library(pec)
source("Predict_survival.R")
q()
library(shiny); runApp('predictALS.R')
new_df = read.csv("sample_data.csv")
# load library
library(dplyr)
library(survival)
library(survminer)
# Predict survival
surv = read.csv("Survival_all.csv") # n=9080
proact = read.csv("PROACT_imputed_dummied.csv") # n=6507
df = merge(surv, proact, by = "SubjectID")
df = df[,-1] # n=6041
df = df %>% # to build a prototype model
select(time_event, status, Age, GenderM,
fvc.slope, fvc_mean,
ALSFRS_Total_slope, ALSFRS_Total_mean,
onset_delta,
onset_siteBulbar, onset_siteLimb, onset_siteLimb.and.Bulbar)
#fitform = Surv(time_event, status) ~ .
fitcox <- coxph(Surv(time_event, status) ~ ., data=df, x = TRUE)
new_df = read.csv("sample_data.csv")
newfit <- survfit(fitcox, newdata = new_df)
ggsurvplot(newfit, data = new_df, conf.int = FALSE,
censor = FALSE, surv.median.line = "hv",
ggtheme = theme_minimal(),
xlim = c(0,75))
ggsurvplot(newfit, data = new_df, conf.int = FALSE,
censor = FALSE, surv.median.line = "hv",
ggtheme = theme_minimal())
runApp('predictALS.R')
runApp('predictALS.R')
version
runApp('predictALS.R')
if (!requireNamespace("devtools")){
install.packages("devtools")
}
library(devtools)
if (!requireNamespace("survminer")){
devtools::install_github("kassambara/survminer")
}
library(survminer)
install.packages("tk")
install.packages("tcltk")
??ggsurvplot
?ggsurvplot
library()
library(survminer)
if (!requireNamespace("survminer")){
devtools::install_github("kassambara/survminer")
}
library(devtools)
option('repos')
options('repos')
if (!requireNamespace("survminer")){
install.packages("survminer")
}
library(survminer)
# if (!requireNamespace("survminer")){
#   install.packages("survminer")
# }
options(repos = CRAN::repositories())
# if (!requireNamespace("survminer")){
#   install.packages("survminer")
# }
options(repos = repositories())
options(repos = CRAN::repositories())
# if (!requireNamespace("survminer")){
#   install.packages("survminer")
# }
options(repos = repositories())
library(BiocManager)
options(repos = BiocManager::repositories())
options('repos')
runApp('predictALS.R')
runApp('predictALS.R')
runApp('predictALS.R')
q()
